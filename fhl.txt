using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.IO;

namespace CoDex
{
    public partial class Form1 : Form
    {
        string resHex = "";
        string dataHex = "";
        string data;
        string resresBin;
        string ResXOR;
        string resDexHex;
        string key;
        string res;
        string resres;
        string keyBin;
        string dataBin;
        string systemBin = "01";
        string resXOR = "";
        int k = 0;
        int value = 0;
        string Hex(int num)
        {
            resHex = "";
            string systemHex = "0123456789ABCDEF";

            while (num > 0)
            {
                int rem = num % 16;
                resHex = systemHex[rem] + resHex;
                num /= 16;
            }

            while (resHex.Length < 2)
            {
                resHex = "0" + resHex;
            }

            return resHex;
        }

        string Bin(int num)
        {
            string resBin = "";


            while (num > 0)
            {
                int rem = num % 2;
                resBin = systemBin[rem] + resBin; 
                num /= 2;
            }

            // Чтобы всегда было 8 бит 
            while (resBin.Length < 11)
            {
                resBin = "0" + resBin; 
            }

            return resBin;
        }

      
        string XOR(int num1, int num2)
        {
            char HalfNum;
            
            if (k % 11 == 0)
            {
                resXOR = "";
            }

            HalfNum = systemBin[num1 ^ num2];
            if (HalfNum == '1')
            {
                value += (int)Math.Pow(2, (10 - k));
            }
            k++;
            if (k == 11)
            {
                resXOR += (char)value;
                k = 0;
                value = 0;
            }
            return resXOR;
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void загрузитьОткрытыйТекстToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"; // Установка фильтров для файлов

            // Показать диалог открытия файла и проверить, была ли нажата кнопка OK
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog1.FileName;// Получение пути к файлу        
                textBox_OpenText.Text = File.ReadAllText(filePath);// Чтение содержимого файла и установка его в текстовое поле
            }
            data = textBox_OpenText.Text;

            for (int i = 0; i < data.Length; i++)
            {
                dataBin += Bin(data[i]);
            }

            for (int i = 0; i < data.Length; i++)
            {
                dataHex += Hex(data[i]);
            }
            textBox_OpenTextHex.Text = dataHex;
        }

        private void сгенерироватьКлючToolStripMenuItem_Click(object sender, EventArgs e)
        {
            key = "";
            Random rand = new Random();

            for (int i = 0; i < 8; i++)
            {
                // Определяем, какой диапазон выбрать
                int randomNumber = rand.Next(32, 126);
                key += Hex((char)randomNumber);
            }

            textBox_Key.Text = key;

            for (int i = 0; i < key.Length; i++)
            {
                keyBin += Bin(key[i]);
            }

        }
        private void зашифроватьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            res = "";
            resDexHex = "";
            for (int i = 0; i < dataBin.Length; i++)
            {
                res += XOR(dataBin[i], keyBin[i % keyBin.Length]);
            }

            for (int i = 0; i < res.Length; i++)
            {
                resDexHex += Hex(res[i]);
            }
            textBox_CloseTextHex.Text = resDexHex;
        }

        private void дешифроватьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            resres = "";
            resresBin = "";
            ResXOR = "";
            res = textBox_CloseTextHex.Text;

            for (int i = 0; i < res.Length; i += 3)  // Шаг 2, потому что каждый байт (2 hex-символа)
            {
                int hexValue = Convert.ToInt32(res.Substring(i, 3), 16);  
                resres += (char)hexValue; 
            }

            for (int i = 0; i < resres.Length; i++)
            {
                resresBin += Bin(resres[i]);
            }

            for (int i = 0; i < resresBin.Length; i++)
            {
                ResXOR += XOR(resresBin[i], keyBin[i % keyBin.Length]);
            }

            textBox_OpenText.Text = ResXOR;

        }

        private void SaveOpenTextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"; // Установка фильтров для файлов
            saveFileDialog1.Title = "Сохранить открытый текст";

            // Показать диалог сохранения файла и проверить, была ли нажата кнопка OK
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                // Получение пути, выбранного пользователем
                string filePath = saveFileDialog1.FileName;

                // Запись содержимого текстового поля в файл
                File.WriteAllText(filePath, textBox_OpenText.Text);
            }
        }
        private void SaveCloseTextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"; // Установка фильтров для файлов
            saveFileDialog1.Title = "Сохранить открытый текст";

            // Показать диалог сохранения файла и проверить, была ли нажата кнопка OK
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                // Получение пути, выбранного пользователем
                string filePath = saveFileDialog1.FileName;

                // Запись содержимого текстового поля в файл
                File.WriteAllText(filePath, textBox_CloseTextHex.Text);
            }
        }

        private void SaveKeyToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"; // Установка фильтров для файлов
            saveFileDialog1.Title = "Сохранить открытый текст";

            // Показать диалог сохранения файла и проверить, была ли нажата кнопка OK
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                // Получение пути, выбранного пользователем
                string filePath = saveFileDialog1.FileName;

                // Запись содержимого текстового поля в файл
                File.WriteAllText(filePath, textBox_Key.Text);
            }
        }

        private void LoadCloseTextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"; // Установка фильтров для файлов

            // Показать диалог открытия файла и проверить, была ли нажата кнопка OK
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog1.FileName;// Получение пути к файлу        
                textBox_CloseTextHex.Text = File.ReadAllText(filePath);// Чтение содержимого файла и установка его в текстовое поле
            }
        }

        private void hToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"; // Установка фильтров для файлов

            // Показать диалог открытия файла и проверить, была ли нажата кнопка OK
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog1.FileName;// Получение пути к файлу        
                textBox_Key.Text = File.ReadAllText(filePath);// Чтение содержимого файла и установка его в текстовое поле
            }

            key = "";
            keyBin = "";
            string key1;
            key1 = textBox_Key.Text;

            for (int i = 0; i < key1.Length; i += 2)  // Шаг 2, потому что каждый байт (2 hex-символа)
            {
                int hexValue = Convert.ToInt32(key1.Substring(i, 2), 16);
                key += (char)hexValue;
            }

            for (int i = 0; i < key.Length; i++)
            {
                keyBin += Bin(key[i]);
            }
        }
    }
}
